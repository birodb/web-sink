(ns restful-clojure.core
  (:gen-class)
  ;(use 'ring.adapter.jetty)
  ; => nil
  (:require [hiccup.core :refer [html h]]
            [compojure.handler :as handler]
            [compojure.route :as route]
            [compojure.core :refer [GET POST ANY context defroutes]]
            [ring.middleware.json :refer [wrap-json-params wrap-json-response]]
            [restful-clojure.db :as db]
            [clojure.pprint :refer [pprint]]
            [ring.adapter.jetty :refer [run-jetty]])
  (:import java.io.StringWriter))

(defn hashmap-to-string-pretty [m] 
  (let [w (StringWriter.)] (pprint m w)(.toString w)))

(defn html-from-request [request]
  [:html 
   [:head 
    [:title "response-from-request"]]
   [:body
    [:h1 {:class "header"} "My Page Title"]
    [:br]
    [:div (str "user.dir: " (System/getProperty "user.dir"))]
    [:div {:style "border: 1px solid lime;"}
     [:p (str "uri: " (:uri request))]
     [:p (str "query-string: " (h (:query-string request)))]
     [:p (str "remote-addr: " (h (:remote-addr request)))]
     [:p "body:"]
     [:pre (h (hashmap-to-string-pretty (slurp (:body request))))]
     [:p (h (str request))]]]])

(defn app-handler [request]
    {:status 200
        :headers {"Content-Type" "text/html;encoding=us-ascii"}
        :body (-> (html-from-request request) html)})

(defroutes app-routes
  ;(GET "/" [] (resource-response "index.html" {:root "public"}))
  (ANY "/*" request (html (html-from-request request)))
  (route/resources "/")
  (route/not-found "<h1>Page not found<h1>"))

(def app
  (-> app-routes
      handler/api      
      ;wrap-json-params
      ;wrap-json-response
      ))

;(defonce wserver (run-jetty app-handler {:port 3001 :join? false}))
(defonce wserver (run-jetty app {:port 3001 :join? false}))

(defn now [] (new java.util.Date))

(defn -main 
  [& args]
  ;(println app)
  (println "Dr. Bubo" " - " (now)))
